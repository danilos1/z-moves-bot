import datetime

import telebot
import os
import re
import schedule
from time import sleep
from threading import Thread
from z_moves.buttons import *
from z_moves.scripts.schedule_parser import *

bot = telebot.TeleBot(os.environ['BOT_TOKEN'])
sch = Schedule()

'''
########################################################################################################################
                                              KEYBOARD SECTION
########################################################################################################################                               
'''

back_button_keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
back_button_keyboard.add(back_button)

role_choose_keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
role_choose_keyboard.add(student_button, teacher_button)

re_register_keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
re_register_keyboard.add(student_button, teacher_button)
re_register_keyboard.add(back_button)

settings_keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
settings_keyboard.add(links_button, hotlines_button)
settings_keyboard.add(notifications_button, change_group_button)
settings_keyboard.add(back_button)

main_menu_keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
main_menu_keyboard.add(current_day_button, tomorrow_day_button)
main_menu_keyboard.add(session_button)
main_menu_keyboard.add(schedule_button, settings_button)
main_menu_keyboard.add(info_button, help_button)

week_choose_keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
week_choose_keyboard.add(week1_button, week2_button)
week_choose_keyboard.add(back_button)

day_choose_keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
day_choose_keyboard.add(
    day_button[0],
    day_button[1],
    day_button[2],
    day_button[3],
    day_button[4],
    back_button
)

'''
########################################################################################################################
                                                BOT START
########################################################################################################################
'''


@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        bot.send_message(message.chat.id, '''
–û, –ø—Ä–∏–≤–µ—Ç! ü•¥ü§ô
Z-Moves –Ω–∞ —Å–≤—è–∑–∏ üòé
–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–π —Å–µ–±—è –∫–∞–∫ "—Å—Ç—É–¥–µ–Ω—Ç" –∏–ª–∏ "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" üôÇ    
''', reply_markup=role_choose_keyboard)
        bot.register_next_step_handler(message, callback=registration)

    except AttributeError:
        bot.send_message(message.chat.id, 'i dont understand, sorry bro')
        bot.register_next_step_handler(message, callback=registration)


@bot.message_handler(content_types=['text'])
def identification(message):
    bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–π —Å–µ–±—è –∫–∞–∫ "—Å—Ç—É–¥–µ–Ω—Ç" –∏–ª–∏ "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" üôÇ', reply_markup=re_register_keyboard)
    bot.register_next_step_handler(message, callback=re_registration)


@bot.message_handler(content_types=['text'])
def registration(message):
    try:
        message_text = message.text
        if message_text == student_button:
            bot.send_message(message.chat.id,
                             '–ü—Ä–∏–≤–µ—Ç, —Ç—Ä—É–¥—è–≥–∞! –ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–≤–æ—é –≥—Ä—É–ø–ø—É üôÇ',
                             reply_markup=re_register_keyboard)
            bot.register_next_step_handler(message, callback=student_registration)

        elif message_text == teacher_button:
            bot.send_message(message.chat.id,
                    '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º üôÇ',
                    reply_markup=re_register_keyboard
            )
            bot.register_next_step_handler(message, callback=teacher_registration)
        elif message_text == back_button:
            bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...', reply_markup=role_choose_keyboard)
            bot.register_next_step_handler(message, callback=re_registration)
        else:
            bot.send_message(message.chat.id, '–ù–µ –º–æ–≥—É –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=role_choose_keyboard)
            bot.register_next_step_handler(message, callback=registration)
    except AttributeError:
        bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=settings_keyboard)
        bot.register_next_step_handler(message, callback=settings)

@bot.message_handler(content_types=['text'])
def re_registration(message):
    try:
        message_text = message.text
        if message_text == student_button:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É üôÇ')
            bot.register_next_step_handler(message, callback=student_registration)

        elif message_text == teacher_button:
            bot.send_message(message.chat.id,
                    '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º üôÇ'
            )
            bot.register_next_step_handler(message, callback=teacher_registration)
        elif message_text == back_button:
            bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...', reply_markup=settings_keyboard)
            bot.register_next_step_handler(message, callback=settings)
        else:
            bot.send_message(message.chat.id, '–ù–µ –º–æ–≥—É –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=role_choose_keyboard)
            bot.register_next_step_handler(message, callback=registration)
    except AttributeError:
        bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=settings_keyboard)
        bot.register_next_step_handler(message, callback=settings)

'''                        
########################################################################################################################                    
                                                 MAIN MENU TREE       
########################################################################################################################                                                       
'''

@bot.message_handler(content_types=['text'])
def teacher_registration(message):
    try:
        message_text = message.text
        if message_text == back_button:
            bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...', reply_markup=role_choose_keyboard)
            bot.register_next_step_handler(message, callback=registration)
        else:
            if sch.is_teacher_exist(message.text):
                sch.identify_as('–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', message_text)
                bot.send_message(message.chat.id,
                                 '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {0}!'.format(sch.get_teacher_name(message_text)),
                                 reply_markup=main_menu_keyboard)
                bot.register_next_step_handler(message, callback=main_menu)
            else:
                bot.send_message(message.chat.id, '''–ú–Ω–µ –Ω–µ —É–¥–∞—ë—Ç—Å—è –í–∞—Å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ü§•\n–ü–æ—Ä–æ–±—É–π—Ç–µ –µ—â—ë''')
                bot.register_next_step_handler(message, callback=teacher_registration)

    except AttributeError:
        bot.send_message(message.chat.id, '–¢–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º–Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç üôÇ')
        bot.register_next_step_handler(message, callback=teacher_registration)

@bot.message_handler(content_types=['text'])
def student_registration(message):
    try:
        message_text = message.text
        if message_text == back_button:
            bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...', reply_markup=role_choose_keyboard)
            bot.register_next_step_handler(message, callback=registration)
        else:
            if sch.is_group_exist(message.text):
                sch.identify_as('—Å—Ç—É–¥–µ–Ω—Ç', message_text)
                bot.send_message(message.chat.id, '–ï—Å—Ç—å —Ç–∞–∫–∞—è! –ù—É –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º üôÇ', reply_markup=main_menu_keyboard)
                bot.register_next_step_handler(message, callback=main_menu)
            else:
                bot.send_message(message.chat.id, '''–û–π, —á—Ç–æ-—Ç–æ —è –æ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ —Å–ª—ã—à–∞–ª ü§•\n–ü–æ—Ä–æ–±—É–π –µ—â—ë''')
                bot.register_next_step_handler(message, callback=student_registration)

    except AttributeError:
        bot.send_message(message.chat.id, '–¢–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º–Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç üôÇ')
        bot.register_next_step_handler(message, callback=student_registration)


@bot.message_handler(content_types=['text'])
def main_menu(message):
    try:
        mtl = message.text.lower()

        if mtl == schedule_button.lower():
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–µ–¥–µ–ª—é', reply_markup=week_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_choose)

        elif mtl == settings_button.lower():
            bot.send_message(message.chat.id, '–ß—Ç–æ —Ç—ã –∂–µ–ª–∞–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?', reply_markup=settings_keyboard)
            bot.register_next_step_handler(message, callback=settings)

        elif mtl == info_button.lower():
            bot.send_message(message.chat.id, develop_button, reply_markup=main_menu_keyboard)
            bot.register_next_step_handler(message, callback=main_menu)

        elif mtl == help_button.lower():
            bot.send_message(message.chat.id, develop_button, reply_markup=main_menu_keyboard)
            bot.register_next_step_handler(message, callback=main_menu)

        elif mtl == current_day_button.lower():
            s = show_day("–°–µ–≥–æ–¥–Ω—è", date.today().weekday() + 1)
            bot.send_message(message.chat.id, s, parse_mode="HTML", reply_markup=main_menu_keyboard)
            bot.register_next_step_handler(message, callback=main_menu)

        elif mtl == tomorrow_day_button.lower():
            tomorrow = (date.today() + datetime.timedelta(days=1)).weekday() + 1
            s = show_day("–ó–∞–≤—Ç—Ä–∞", tomorrow)
            bot.send_message(message.chat.id, s, parse_mode="HTML", reply_markup=main_menu_keyboard)
            bot.register_next_step_handler(message, callback=main_menu)
        else:
            bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=main_menu_keyboard)
            bot.register_next_step_handler(message, callback=main_menu)
    except AttributeError:
        bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=settings_keyboard)
        bot.register_next_step_handler(message, callback=settings)


'''
########################################################################################################################                                            
                                                  SCHEDULE BRANCH                   
########################################################################################################################                                                  
'''


def show_day(wd: str, day: int):
    if day > 4:
        s = wd + ' –ø–∞—Ä –Ω–µ—Ç—É. –û—Ç–¥—ã—Ö–∞–µ–º'
    else:
        weekday = week_days[day]
        cur_week = get_current_week()
        s = show_schedule(weekday, sch.get_schedule(cur_week, day), '', '', '')
    return s


@bot.message_handler(content_types=['text'])
def week_choose(message):
    try:
        mtl = message.text.lower()
        if mtl == week1_button.lower():
            bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å –¥–µ–Ω—å', reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_1)
        elif mtl == week2_button.lower():
            bot.send_message(message.chat.id, '–ê —Ç–µ–ø–µ—Ä—å –¥–µ–Ω—å', reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_2)
        elif mtl == back_button.lower():
            bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...', reply_markup=main_menu_keyboard)
            bot.register_next_step_handler(message, callback=main_menu)
        else:
            bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=week_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_choose)

    except AttributeError:
        bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=settings_keyboard)
        bot.register_next_step_handler(message, callback=settings)


@bot.message_handler(content_types=['text'])
def week_1(message):
    try:
        mtl = message.text.lower()
        if mtl == day_button[0].lower():
            bot.send_message(message.chat.id, show_schedule("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", sch.get_schedule(1, 1), '', '', ''),
                             parse_mode="HTML",
                             reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_1)
        elif mtl == day_button[1].lower():
            bot.send_message(message.chat.id, show_schedule("–≤—Ç–æ—Ä–Ω–∏–∫", sch.get_schedule(1, 2), '', '', ''),
                             parse_mode="HTML", reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_1)
        elif mtl == day_button[2].lower():
            bot.send_message(message.chat.id, show_schedule("—Å—Ä–µ–¥—É", sch.get_schedule(1, 3), '', '', ''),
                             parse_mode="HTML", reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_1)
        elif mtl == day_button[3].lower():
            bot.send_message(message.chat.id, show_schedule("—á–µ—Ç–≤–µ—Ä–≥", sch.get_schedule(1, 4), '', '', ''),
                             parse_mode="HTML",
                             reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_1)
        elif mtl == day_button[4].lower():
            bot.send_message(
                message.chat.id, show_schedule("–ø—è—Ç–Ω–∏—Ü—É", sch.get_schedule(1, 5), '', '', ''),
                parse_mode="HTML",
                reply_markup=day_choose_keyboard
            )
            bot.register_next_step_handler(message, callback=week_1)
        elif mtl == back_button.lower():
            bot.send_message(message.chat.id, text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...', reply_markup=week_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_choose)
        else:
            bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_1)

    except AttributeError:
        bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=settings_keyboard)
        bot.register_next_step_handler(message, callback=settings)


@bot.message_handler(content_types=['text'])
def week_2(message):
    try:
        mtl = message.text.lower()

        if mtl == day_button[0].lower():
            bot.send_message(message.chat.id, show_schedule("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", sch.get_schedule(2, 1), '', '', ''),
                             parse_mode="HTML", reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_2)
        elif mtl == day_button[1].lower():
            bot.send_message(message.chat.id, show_schedule("–≤—Ç–æ—Ä–Ω–∏–∫", sch.get_schedule(2, 2), '', '', ''),
                             parse_mode="HTML", reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_2)
        elif mtl == day_button[2].lower():
            bot.send_message(message.chat.id, show_schedule("—Å—Ä–µ–¥—É", sch.get_schedule(2, 3), '', '', ''),
                             parse_mode="HTML", reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_2)
        elif mtl == day_button[3].lower():
            bot.send_message(message.chat.id, show_schedule("—á–µ—Ç–≤–µ—Ä–≥", sch.get_schedule(2, 4), '', '', ''),
                             parse_mode="HTML", reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_2)
        elif mtl == day_button[4].lower():
            bot.send_message(message.chat.id, show_schedule("–ø—è—Ç–Ω–∏—Ü—É", sch.get_schedule(2, 5), '', '', ''),
                             parse_mode="HTML", reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_2)
        elif mtl == back_button.lower():
            bot.send_message(message.chat.id, text='–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...', reply_markup=week_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_choose)
        else:
            bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=day_choose_keyboard)
            bot.register_next_step_handler(message, callback=week_2)

    except AttributeError:
        bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=settings_keyboard)
        bot.register_next_step_handler(message, callback=settings)


'''
########################################################################################################################
                                             SCHEDULE BRANCH HAVE ENDED                
########################################################################################################################
'''

'''                                            
########################################################################################################################
                                                  SETTINGS BRANCH   
########################################################################################################################                                                                 
'''


@bot.message_handler(content_types=['text'])
def settings(message):
    try:
        mtl = message.text.lower()

        if mtl == links_button.lower():
            bot.send_message(message.chat.id, develop_button, reply_markup=settings_keyboard)
            bot.register_next_step_handler(message, settings)
        elif mtl == hotlines_button.lower():
            bot.send_message(message.chat.id, develop_button, reply_markup=settings_keyboard)
            bot.register_next_step_handler(message, settings)
        elif mtl == notifications_button.lower():
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM), –≤ –∫–æ—Ç–æ—Ä–æ–µ —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                             reply_markup=back_button_keyboard)
            bot.register_next_step_handler(message, callback=set_notification)
        elif mtl == change_group_button.lower():
            bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–π —Å–µ–±—è –∫–∞–∫ "—Å—Ç—É–¥–µ–Ω—Ç" –∏–ª–∏ "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" üôÇ',
                             reply_markup=re_register_keyboard)
            bot.register_next_step_handler(message, callback=re_registration)
        elif mtl == back_button.lower():
            bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...', reply_markup=main_menu_keyboard)
            bot.register_next_step_handler(message, callback=main_menu)
        else:
            bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=settings_keyboard)
            bot.register_next_step_handler(message, callback=settings)

    except AttributeError:
        bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=settings_keyboard)
        bot.register_next_step_handler(message, callback=settings)


is_notification_on = False


@bot.message_handler(content_types=['text'])
def set_notification(message):
    global is_notification_on
    try:
        mtl = message.text.lower()
        if re.match("^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", mtl):
            if not is_notification_on:
                is_notification_on = True
                schedule.every().day.at(message.text).do(lambda: send_notification(message))
                bot.send_message(message.chat.id, '–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=settings_keyboard)
                bot.register_next_step_handler(message, callback=settings)
            else:
                bot.send_message(message.chat.id, '–í—Ä–µ–º—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=settings_keyboard)
                bot.register_next_step_handler(message, callback=settings)

        elif mtl == back_button.lower():
            bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...', reply_markup=settings_keyboard)
            bot.register_next_step_handler(message, callback=settings)
        else:
            bot.send_message(message.chat.id, '–ù–µ–º–Ω–æ–∂–µ—á–∫–æ –Ω–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É :(', reply_markup=back_button_keyboard)
            bot.register_next_step_handler(message, callback=set_notification)

    except AttributeError:
        bot.send_message(message.chat.id, 'i dont understand, sorry bro', reply_markup=settings_keyboard)
        bot.register_next_step_handler(message, callback=settings)


def schedule_checker():
    while True:
        schedule.run_pending()
        sleep(1)


def send_notification(message):
    bot.send_message(message.chat.id, show_day("–ó–∞–≤—Ç—Ä–∞", date.today().weekday() + 1), parse_mode="HTML")
    global is_notification_on
    is_notification_on = False


notification_thread = Thread(target=schedule_checker)
notification_thread.start()

if __name__ == '__main__':
    bot.polling()
